name: Test Automation Content Processing

on:
  workflow_call: 
    inputs:
      CP_WEB_URL:
        required: true
        type: string
      CP_RG:
        required: true
        type: string
      CP_CONTAINERAPP_PREFIX:
        required: true
        type: string

env:
    url: ${{ inputs.CP_WEB_URL }}
    CP_RG: ${{ inputs.CP_RG }}
    CP_CONTAINERAPP_PREFIX: ${{ inputs.CP_CONTAINERAPP_PREFIX }}
    accelerator_name: "Content Processing"


jobs:
  test:

    runs-on: ubuntu-latest
    steps:      
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Login to Azure
        run: |
          az login --service-principal -u ${{ secrets.AZURE_MAINTENANCE_CLIENT_ID }} -p ${{ secrets.AZURE_MAINTENANCE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_MAINTENANCE_SUBSCRIPTION_ID }}

      - name: Start Container App
        id: start-container-app
        uses: azure/cli@v2
        with:
          azcliversion: 'latest'
          inlineScript: |
            az rest -m post -u "/subscriptions/${{ secrets.AZURE_MAINTENANCE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.CP_RG }}/providers/Microsoft.App/containerApps/${{ env.CP_CONTAINERAPP_PREFIX }}-app/start?api-version=2025-01-01"
            az rest -m post -u "/subscriptions/${{ secrets.AZURE_MAINTENANCE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.CP_RG }}/providers/Microsoft.App/containerApps/${{ env.CP_CONTAINERAPP_PREFIX }}-api/start?api-version=2025-01-01"
            az rest -m post -u "/subscriptions/${{ secrets.AZURE_MAINTENANCE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.CP_RG }}/providers/Microsoft.App/containerApps/${{ env.CP_CONTAINERAPP_PREFIX }}-web/start?api-version=2025-01-01"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/e2e-test/requirements.txt

      - name: Ensure browsers are installed
        run: python -m playwright install --with-deps chromium

      - name: Validate URL
        run: |
          if [ -z "${{ env.url }}" ]; then
            echo "ERROR: No URL provided for testing"
            exit 1
  
          fi

          echo "Testing URL: ${{ env.url }}"


      - name: Wait for Application to be Ready
        run: |
          echo "Waiting for application to be ready at ${{ env.url }} "
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt: Checking if application is ready..."
            if curl -f -s "${{ env.url }}" > /dev/null; then
              echo "Application is ready!"
              break

            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "Application is not ready after $max_attempts attempts"
              exit 1
            fi
            
            echo "Application not ready, waiting 30 seconds..."
            sleep 30
            attempt=$((attempt + 1))
          done

      - name: Run tests(1)
        id: test1
        run: |
          xvfb-run pytest --headed --html=report/report.html --self-contained-html
        working-directory: tests/e2e-test
        continue-on-error: true

      - name: Sleep for 30 seconds
        if: ${{ steps.test1.outcome == 'failure' }}
        run: sleep 30s
        shell: bash

      - name: Run tests(2)
        id: test2
        if: ${{ steps.test1.outcome == 'failure' }}
        run: |
          xvfb-run pytest --headed --html=report/report.html --self-contained-html
        working-directory: tests/e2e-test
        continue-on-error: true

      - name: Sleep for 60 seconds
        if: ${{ steps.test2.outcome == 'failure' }}
        run: sleep 60s
        shell: bash

      - name: Run tests(3)
        id: test3
        if: ${{ steps.test2.outcome == 'failure' }}
        run: |
          xvfb-run pytest --headed --html=report/report.html --self-contained-html
        working-directory: tests/e2e-test

      - name: Upload test report
        id: upload_report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-report
          path: tests/e2e-test/report/*

      - name: Send Notification
        if: always()
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          REPORT_URL=${{ steps.upload_report.outputs.artifact-url }}
          IS_SUCCESS=${{ steps.test1.outcome == 'success' || steps.test2.outcome == 'success' || steps.test3.outcome == 'success' }}
          # Construct the email body
          if [ "$IS_SUCCESS" = "true" ]; then
            EMAIL_BODY=$(cat <<EOF
            {
              "body": "<p>Dear Team,</p><p>We would like to inform you that the ${{ env.accelerator_name }} Test Automation process has completed successfully.</p><p><strong>Run URL:</strong> <a href=\"${RUN_URL}\">${RUN_URL}</a><br></p><p><strong>Test Report:</strong> <a href=\"${REPORT_URL}\">${REPORT_URL}</a></p><p>Best regards,<br>Your Automation Team</p>",
              "subject": "${{ env.accelerator_name }} Test Automation - Success"
            }
          EOF
            )
          else
            EMAIL_BODY=$(cat <<EOF
            {
              "body": "<p>Dear Team,</p><p>We would like to inform you that the ${{ env.accelerator_name }} Test Automation process  has encountered an issue and has failed to complete successfully.</p><p><strong>Run URL:</strong> <a href=\"${RUN_URL}\">${RUN_URL}</a><br> ${OUTPUT}</p><p><strong>Test Report:</strong> <a href=\"${REPORT_URL}\">${REPORT_URL}</a></p><p>Please investigate the matter at your earliest convenience.</p><p>Best regards,<br>Your Automation Team</p>",
              "subject": "${{ env.accelerator_name }} Test Automation - Failure"
            }
          EOF
            )
          fi

          # Send the notification
          curl -X POST "${{ secrets.EMAILNOTIFICATION_LOGICAPP_URL_TA }}" \
            -H "Content-Type: application/json" \
            -d "$EMAIL_BODY" || echo "Failed to send notification"

      - name: Stop Container App
        if: always()
        uses: azure/cli@v2
        with:
          azcliversion: 'latest'
          inlineScript: |
            az rest -m post -u "/subscriptions/${{ secrets.AZURE_MAINTENANCE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.CP_RG }}/providers/Microsoft.App/containerApps/${{ env.CP_CONTAINERAPP_PREFIX }}-app/stop?api-version=2025-01-01"
            az rest -m post -u "/subscriptions/${{ secrets.AZURE_MAINTENANCE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.CP_RG }}/providers/Microsoft.App/containerApps/${{ env.CP_CONTAINERAPP_PREFIX }}-api/stop?api-version=2025-01-01"
            az rest -m post -u "/subscriptions/${{ secrets.AZURE_MAINTENANCE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.CP_RG }}/providers/Microsoft.App/containerApps/${{ env.CP_CONTAINERAPP_PREFIX }}-web/stop?api-version=2025-01-01"
            az logout